{{!-- EVERYTHING ON THIS PAGE ONLY SHOWS IF PREVIOUSLY SELECTED EXCEPT DOWNLOAD --}}
<body>
    <h3 style="color: black; text-align:center">Download clean data:</h3>
    <div class="download-container" style="justify-content: center;" id="download-container">
        {{!-- Code for the downlaod thing is in scrippt --}}
    </div>

    <h3 style="color: black; text-align:center" id="granularity-title"></h3>

    <div class="container" style="text-align: center;" id="granularity-container"></div>

    <div id="graphs" class="py-5">
            <h3 class="text-center" style="color: black;" id="graphs-title"></h3>
            <div id="graphs-container" class="row mt-4">
                <!-- Dynamic graphs will be inserted here -->
            </div>
    </div>

    <h3 class="text-center" style="color: black;" id="knn-title"></h3>
    <div class="container" id="classification-container" style="width: 100%; height: 400px;"></div>

</body>

<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script>

// Fetch the file name from the backend
    async function fetchFileName() {
    try {
        const response = await fetch('https://powerwash-flask.onrender.com/get-filename');
        if (!response.ok) {
            console.error("Failed to fetch file name.", response.statusText);
            return;
        }

        const fileName = await response.json();

        const downloadContainer = document.getElementById("download-container");
        downloadContainer.innerHTML = '';

        const downloadLink = document.createElement("a");
        downloadLink.href = `https://powerwash-flask.onrender.com/cleaned_data/${fileName["filename"]}`;
        downloadLink.download = fileName["filename"];
        downloadLink.className = "download-icon";
        downloadLink.title = "Download File";

        const icon = document.createElement("i");
        icon.className = "fas fa-arrow-down";

        const fileNameSpan = document.createElement("span");
        fileNameSpan.textContent = fileName["filename"];
        fileNameSpan.style=
        
        downloadContainer.appendChild(fileNameSpan);
        downloadLink.appendChild(icon);
        downloadContainer.appendChild(downloadLink);
        
    } catch (error) {
        console.error("Error in fetchFileName:", error);
    }
}

//Fetch the granularity of the data from the backend
    async function fetchGranularity(){
        try {
            const response = await fetch('https://powerwash-flask.onrender.com/get-granularity');
            if (!response.ok) {
                console.error("Failed to fetch file name.", response.statusText);
                return;
            }

            if(response.status == 201){ //if didnt ask for granularity
                return;
            }
            else{ // if asked for, render
                
                const pKey = await response.json();

                const granTitle = document.getElementById("granularity-title")
                granTitle.innerHTML = '';
                granTitle.innerText = "Granularity"

                const granularityContainer = document.getElementById("granularity-container");
                granularityContainer.innerHTML = '';

                const txt = document.createElement("h4")
                txt.textContent = `The primary key(s) of your data is: "${pKey["pKey"]}"`;
                txt.style= "color: black; margin-right:10px;"
        
                granularityContainer.appendChild(txt);
            }
            
        } catch (error) {
            console.error("Error in fetchFileName:", error);
        }
    }

    function kNNPlotHelper(data) {

        const knnTitle = document.getElementById("knn-title")
                knnTitle.innerHTML = '';
                knnTitle.innerText = "K-Nearest Neighbors Classification"
        const graphsContainer = document.getElementById("classification-container");
        graphsContainer.innerHTML = ''; 

        const colDiv = document.createElement("div");
        colDiv.className = "col-md-12 d-flex justify-content-center";

        const cardDiv = document.createElement("div");
        cardDiv.className = "card shadow";
        cardDiv.style.width = "80%";

        const cardBody = document.createElement("div");
        cardBody.className = "card-body text-center";
        cardBody.style.backgroundColor = "#f1f1f1";

        const title = document.createElement("h5");
        title.className = "card-title";
        title.style.color = "black";
        title.textContent = "KNN Classification Results";

        const graphDiv = document.createElement("div");
        graphDiv.id = `graph-knn`;
        graphDiv.style.height = "400px";
        graphDiv.style.width = "100%";

        cardBody.appendChild(title);
        cardBody.appendChild(graphDiv);
        cardDiv.appendChild(cardBody);
        colDiv.appendChild(cardDiv);
        graphsContainer.appendChild(colDiv);

        const xValues = data.X_test[data.feature_names[0]];
        const yValues = data.X_test[data.feature_names[1]];
        const predictions = data.predictions;

        const scatterData = {
            x: xValues,
            y: yValues,
            mode: 'markers',
            marker: {
                size: 10,
                color: predictions.map(pred => data.classes.indexOf(pred)), // Map class labels to indices
                colorscale: 'Viridis',
                showscale: true,
                colorbar: {
                    title: "Classes",
                    tickvals: data.classes.map((_, idx) => idx),
                    ticktext: data.classes
                }
            },
            text: predictions // Display predicted class on hover
        };

        const layout = {
            title: "KNN Classification Visualization",
            xaxis: { title: data.feature_names[0] },
            yaxis: { title: data.feature_names[1] },
        };

        Plotly.newPlot(graphDiv.id, [scatterData], layout);
    }


//Fetch the granularity of the data from the backend
    async function fetchClassification(dataframe) {
    try {
        const response = await fetch('https://powerwash-flask.onrender.com/get-classification', {
            method: "POST",
            headers: {
                'Content-Type': 'application/json'
            },
        });

        if (!response.ok) {
            console.error("Failed to fetch classification.", response.statusText);
            return;
        }

        if (response.status === 201) { //didnt want classification
            return;
        } 
        else { //classify and graph
            const data = await response.json();
            console.log(data);
            kNNPlotHelper(data);
        }
    } catch (error) {
        console.error("Error in fetchKNNClassification:", error);
    }
}

//create the graphs by fetching pandas DF info and plotting on front end with plotly
    document.addEventListener("DOMContentLoaded", async () => {
        try {
            const response = await fetch("https://powerwash.onrender.com/get-pairs");
            if (!response.ok) {
                console.error("Failed to fetch pairs:", response.statusText);
                return;
            }

            const pairs = await response.json();
            if (pairs.length === 0) {
                console.log("No pairs to display.");
                return;
            }

            const graphsContainer = document.getElementById("graphs-container");
            pairs.forEach(async (pair, index) => {
                const colDiv = document.createElement("div");
                colDiv.className = "col-md-6";

                const cardDiv = document.createElement("div");
                cardDiv.className = "card shadow";

                const cardBody = document.createElement("div");
                cardBody.className = "card-body text-center";
                cardBody.style.backgroundColor = "#f1f1f1";

                const title = document.createElement("h5");
                title.className = "card-title";
                title.style.color = "black";
                title.textContent = `Graph: ${pair[0]} vs ${pair[1]}`;

                const graphDiv = document.createElement("div");
                graphDiv.id = `graph-${index}`;
                graphDiv.style.height = "400px";
                graphDiv.style.width = "100%";

                cardBody.appendChild(title);
                cardBody.appendChild(graphDiv);
                cardDiv.appendChild(cardBody);
                colDiv.appendChild(cardDiv);
                graphsContainer.appendChild(colDiv);

                try {
                    // Fetch data for the pair
                    const pairResponse = await fetch("https://powerwash-flask.onrender.com/get-pair-data", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ pair })
                    });

                    if (!pairResponse.ok) {
                        console.error(`Failed to fetch data for ${pair[0]} and ${pair[1]}:`, pairResponse.statusText);
                        return;
                    }

                    const pairData = await pairResponse.json();

                    /*// Fetch data for the pair
                    const pairResponse = await fetch("http://localhost:5001/get-pair-typea", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ pair })
                    });

                    if (!pairResponse.ok) {
                        console.error(`Failed to fetch types for ${pair[0]} and ${pair[1]}:`, pairResponse.statusText);
                        return;
                    }

                    const pairTypes = await pairResponse.json(); */

                    // Create Plotly graph with the fetched data
                    const trace1 = {
                        x: pairData.x,
                        y: pairData.y,
                        mode: "lines+markers",
                        type: "bar",
                        name: `Pair: ${pair[0]} - ${pair[1]}`,
                    };

                    const layout = {
                        title: `Graph for ${pair[0]} vs ${pair[1]}`,
                        xaxis: {
                            title: `${pair[0]}`
                        },
                        yaxis: {
                            title: `${pair[1]}`
                        }
                    };

                    Plotly.newPlot(graphDiv.id, [trace1], layout);
                } catch (error) {
                    console.error("Error fetching data for pair:", error);
                }
            });

        } catch (error) {
            console.error("Error fetching pairs:", error);
        }
    });

fetchGranularity();
fetchFileName();
fetchClassification();
</script>
